// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/blog/comment": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a comment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blog"
                ],
                "summary": "Add a comment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003ctoken\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Blog ID",
                        "name": "blog_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Comment",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Comment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "comment added successfully",
                        "schema": {
                            "$ref": "#/definitions/types.BlogResp"
                        }
                    },
                    "400": {
                        "description": "invalid data request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error adding comment",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/blog/comments": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get comments of a blog post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blog"
                ],
                "summary": "Get comments of a blog post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003ctoken\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Blog ID",
                        "name": "blog_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Comment ID",
                        "name": "comment_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "comments fetched successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.CommentResp"
                            }
                        }
                    },
                    "400": {
                        "description": "invalid data request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error getting comments",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/blog/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a blog post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blog"
                ],
                "summary": "Create a blog post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003ctoken\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Blog Post Request",
                        "name": "blogPost",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.BlogPostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "blog post created successfully",
                        "schema": {
                            "$ref": "#/definitions/types.BlogResp"
                        }
                    },
                    "400": {
                        "description": "invalid data request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error creating blog",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/blog/delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a blog post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blog"
                ],
                "summary": "Delete a blog post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003ctoken\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Blog ID",
                        "name": "blog_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "blog deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid data request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error deleting blog",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/blog/get": {
            "get": {
                "description": "Get a blog post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blog"
                ],
                "summary": "Get a blog post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Blog ID",
                        "name": "blog_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "blog fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/types.BlogResp"
                        }
                    },
                    "400": {
                        "description": "invalid data request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error getting blog",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/blog/get/user": {
            "get": {
                "description": "Get all blog posts of a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blog"
                ],
                "summary": "Get all blog posts of a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Blog IDs",
                        "name": "blog_ids",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "blogs fetched successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.BlogResp"
                            }
                        }
                    },
                    "400": {
                        "description": "invalid data request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error getting blogs",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/blog/getAll": {
            "get": {
                "description": "Get all blog posts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blog"
                ],
                "summary": "Get all blog posts",
                "responses": {
                    "200": {
                        "description": "blogs fetched successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.BlogResp"
                            }
                        }
                    },
                    "400": {
                        "description": "invalid data request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error getting blogs",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/blog/reaction": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add or remove a reaction",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blog"
                ],
                "summary": "Add or remove a reaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003ctoken\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Blog ID",
                        "name": "blog_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Reaction ID",
                        "name": "reaction_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "reaction added successfully",
                        "schema": {
                            "$ref": "#/definitions/types.BlogResp"
                        }
                    },
                    "400": {
                        "description": "invalid data request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error adding or removing reaction",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/blog/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a blog post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Blog"
                ],
                "summary": "Update a blog post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003ctoken\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Blog ID",
                        "name": "blog_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "update blog post request",
                        "name": "blogPost",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateBlogPostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "blog updated successfully",
                        "schema": {
                            "$ref": "#/definitions/types.BlogResp"
                        }
                    },
                    "400": {
                        "description": "invalid data request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error updating blog",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/create": {
            "post": {
                "description": "Create a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User Request",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.SignUpRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user created successfully",
                        "schema": {
                            "$ref": "#/definitions/types.UserResp"
                        }
                    },
                    "400": {
                        "description": "invalid data request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error creating user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003ctoken\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid data request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error deleting user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/get": {
            "get": {
                "description": "Get a user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get a user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user found successfully",
                        "schema": {
                            "$ref": "#/definitions/types.UserResp"
                        }
                    },
                    "400": {
                        "description": "invalid data request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error getting user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/getAll": {
            "get": {
                "description": "Get all users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "users found successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.UserResp"
                            }
                        }
                    },
                    "400": {
                        "description": "invalid data request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error getting user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Logs in a user and returns a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login Request",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT Token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid data request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "invalid email or password",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003ctoken\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User Request",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UserUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user updated successfully",
                        "schema": {
                            "$ref": "#/definitions/types.UserResp"
                        }
                    },
                    "400": {
                        "description": "invalid data request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error updating user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "types.BlogPostRequest": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "content_text": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "is_published": {
                    "type": "boolean"
                },
                "photo_url": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "types.BlogResp": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.CommentResp"
                    }
                },
                "comments_count": {
                    "type": "integer"
                },
                "content_text": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_published": {
                    "type": "boolean"
                },
                "photo_url": {
                    "type": "string"
                },
                "published_at": {
                    "type": "string"
                },
                "reactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ReactionResp"
                    }
                },
                "reactions_count": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "views": {
                    "type": "integer"
                }
            }
        },
        "types.Comment": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                }
            }
        },
        "types.CommentResp": {
            "type": "object",
            "properties": {
                "blog_post_id": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "types.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "types.ReactionResp": {
            "type": "object",
            "properties": {
                "blog_post_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "types.SignUpRequest": {
            "type": "object",
            "properties": {
                "country": {
                    "type": "string",
                    "default": "Bangladesh"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "types.UpdateBlogPostRequest": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "content_text": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "is_published": {
                    "type": "boolean"
                },
                "photo_url": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "types.UserResp": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string",
                    "default": "Bangladesh"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "job": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "phone": {
                    "type": "string"
                },
                "profile_picture": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "street": {
                    "type": "string"
                },
                "zipcode": {
                    "type": "string"
                }
            }
        },
        "types.UserUpdateRequest": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string",
                    "default": "Bangladesh"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "job": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "profile_picture": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "street": {
                    "type": "string"
                },
                "zipcode": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/blog_api/v1",
	Schemes:          []string{},
	Title:            "Blog API",
	Description:      "This is a sample server for Blog CRUD Operation",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
