basePath: /blog_api/v1
definitions:
  types.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  types.SignUpRequest:
    properties:
      country:
        default: Bangladesh
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      gender:
        type: string
      password:
        type: string
      phone:
        type: string
    type: object
  types.UserResp:
    properties:
      city:
        type: string
      country:
        default: Bangladesh
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      job:
        type: string
      last_name:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      phone:
        type: string
      profile_picture:
        type: string
      state:
        type: string
      street:
        type: string
      zipcode:
        type: string
    type: object
  types.UserUpdateRequest:
    properties:
      city:
        type: string
      country:
        default: Bangladesh
        type: string
      date_of_birth:
        type: string
      first_name:
        type: string
      gender:
        type: string
      job:
        type: string
      last_name:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      password:
        type: string
      phone:
        type: string
      profile_picture:
        type: string
      state:
        type: string
      street:
        type: string
      zipcode:
        type: string
    type: object
host: 192.168.10.135:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for Blog CRUD Operation
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Blog API
  version: "1.0"
paths:
  /user/create:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: user created successfully
          schema:
            $ref: '#/definitions/types.UserResp'
        "400":
          description: invalid data request
          schema:
            type: string
        "500":
          description: error creating user
          schema:
            type: string
      summary: Create a new user
      tags:
      - user
  /user/delete:
    delete:
      consumes:
      - application/json
      description: Delete a user
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: user deleted successfully
          schema:
            type: string
        "400":
          description: invalid data request
          schema:
            type: string
        "500":
          description: error deleting user
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - user
  /user/get:
    get:
      consumes:
      - application/json
      description: Get a user by ID
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: user found successfully
          schema:
            $ref: '#/definitions/types.UserResp'
        "400":
          description: invalid data request
          schema:
            type: string
        "500":
          description: error getting user
          schema:
            type: string
      summary: Get a user by ID
      tags:
      - user
  /user/getAll:
    get:
      consumes:
      - application/json
      description: Get all users
      parameters:
      - description: Offset
        in: query
        name: offset
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: users found successfully
          schema:
            items:
              $ref: '#/definitions/types.UserResp'
            type: array
        "400":
          description: invalid data request
          schema:
            type: string
        "500":
          description: error getting user
          schema:
            type: string
      summary: Get all users
      tags:
      - user
  /user/login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns a JWT token
      parameters:
      - description: Login Request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/types.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: JWT Token
          schema:
            type: string
        "400":
          description: invalid data request
          schema:
            type: string
        "401":
          description: invalid email or password
          schema:
            type: string
      summary: User login
      tags:
      - user
  /user/update:
    put:
      consumes:
      - application/json
      description: Update a user
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: User Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: user updated successfully
          schema:
            $ref: '#/definitions/types.UserResp'
        "400":
          description: invalid data request
          schema:
            type: string
        "500":
          description: error updating user
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - user
swagger: "2.0"
