basePath: /blog_api/v1
definitions:
  types.BlogPostRequest:
    properties:
      category:
        type: string
      content_text:
        type: string
      description:
        type: string
      is_published:
        type: boolean
      photo_url:
        type: string
      title:
        type: string
    type: object
  types.BlogResp:
    properties:
      category:
        type: string
      comments:
        items:
          $ref: '#/definitions/types.CommentResp'
        type: array
      comments_count:
        type: integer
      content_text:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_published:
        type: boolean
      photo_url:
        type: string
      published_at:
        type: string
      reactions:
        items:
          $ref: '#/definitions/types.ReactionResp'
        type: array
      reactions_count:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
      views:
        type: integer
    type: object
  types.Comment:
    properties:
      content:
        type: string
    type: object
  types.CommentResp:
    properties:
      blog_post_id:
        type: string
      content:
        type: string
      id:
        type: string
      user_id:
        type: string
    type: object
  types.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  types.ReactionResp:
    properties:
      blog_post_id:
        type: string
      id:
        type: string
      type:
        type: integer
      user_id:
        type: string
    type: object
  types.SignUpRequest:
    properties:
      country:
        default: Bangladesh
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      gender:
        type: string
      password:
        type: string
      phone:
        type: string
    type: object
  types.UpdateBlogPostRequest:
    properties:
      category:
        type: string
      content_text:
        type: string
      description:
        type: string
      is_published:
        type: boolean
      photo_url:
        type: string
      title:
        type: string
    type: object
  types.UserResp:
    properties:
      city:
        type: string
      country:
        default: Bangladesh
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      id:
        type: string
      job:
        type: string
      last_name:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      phone:
        type: string
      profile_picture:
        type: string
      state:
        type: string
      street:
        type: string
      zipcode:
        type: string
    type: object
  types.UserUpdateRequest:
    properties:
      city:
        type: string
      country:
        default: Bangladesh
        type: string
      date_of_birth:
        type: string
      first_name:
        type: string
      gender:
        type: string
      job:
        type: string
      last_name:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      password:
        type: string
      phone:
        type: string
      profile_picture:
        type: string
      state:
        type: string
      street:
        type: string
      zipcode:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for Blog CRUD Operation
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Blog API
  version: "1.0"
paths:
  /blog/comment:
    delete:
      consumes:
      - application/json
      description: Delete a comment
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Blog ID
        in: query
        name: blog_id
        required: true
        type: string
      - description: Comment ID
        in: query
        name: comment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: comment deleted successfully
          schema:
            type: string
        "400":
          description: invalid data request
          schema:
            type: string
        "500":
          description: error deleting comment
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a comment
      tags:
      - Blog
    post:
      consumes:
      - application/json
      description: Add a comment
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Blog ID
        in: query
        name: blog_id
        required: true
        type: string
      - description: Comment
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/types.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: comment added successfully
          schema:
            $ref: '#/definitions/types.BlogResp'
        "400":
          description: invalid data request
          schema:
            type: string
        "500":
          description: error adding comment
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Add a comment
      tags:
      - Blog
  /blog/comments:
    get:
      consumes:
      - application/json
      description: Get comments of a blog post
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Blog ID
        in: query
        name: blog_id
        required: true
        type: string
      - description: Comment IDs
        in: query
        name: comment_ids
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: comments fetched successfully
          schema:
            items:
              $ref: '#/definitions/types.CommentResp'
            type: array
        "400":
          description: invalid data request
          schema:
            type: string
        "500":
          description: error getting comments
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get comments of a blog post
      tags:
      - Blog
  /blog/create:
    post:
      consumes:
      - application/json
      description: Create a blog post
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Blog Post Request
        in: body
        name: blogPost
        required: true
        schema:
          $ref: '#/definitions/types.BlogPostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: blog post created successfully
          schema:
            $ref: '#/definitions/types.BlogResp'
        "400":
          description: invalid data request
          schema:
            type: string
        "500":
          description: error creating blog
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a blog post
      tags:
      - Blog
  /blog/delete:
    delete:
      consumes:
      - application/json
      description: Delete a blog post
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Blog ID
        in: query
        name: blog_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: blog deleted successfully
          schema:
            type: string
        "400":
          description: invalid data request
          schema:
            type: string
        "500":
          description: error deleting blog
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a blog post
      tags:
      - Blog
  /blog/get:
    get:
      consumes:
      - application/json
      description: Get a blog post
      parameters:
      - description: Blog ID
        in: query
        name: blog_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: blog fetched successfully
          schema:
            $ref: '#/definitions/types.BlogResp'
        "400":
          description: invalid data request
          schema:
            type: string
        "500":
          description: error getting blog
          schema:
            type: string
      summary: Get a blog post
      tags:
      - Blog
  /blog/get/user:
    get:
      consumes:
      - application/json
      description: Get all blog posts of a user
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      - description: Blog IDs
        in: query
        name: blog_ids
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: blogs fetched successfully
          schema:
            items:
              $ref: '#/definitions/types.BlogResp'
            type: array
        "400":
          description: invalid data request
          schema:
            type: string
        "500":
          description: error getting blogs
          schema:
            type: string
      summary: Get all blog posts of a user
      tags:
      - Blog
  /blog/getAll:
    get:
      consumes:
      - application/json
      description: Get all blog posts
      produces:
      - application/json
      responses:
        "200":
          description: blogs fetched successfully
          schema:
            items:
              $ref: '#/definitions/types.BlogResp'
            type: array
        "400":
          description: invalid data request
          schema:
            type: string
        "500":
          description: error getting blogs
          schema:
            type: string
      summary: Get all blog posts
      tags:
      - Blog
  /blog/reaction:
    post:
      consumes:
      - application/json
      description: Add or remove a reaction
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Blog ID
        in: query
        name: blog_id
        required: true
        type: string
      - description: Reaction ID
        in: query
        name: reaction_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: reaction added successfully
          schema:
            $ref: '#/definitions/types.BlogResp'
        "400":
          description: invalid data request
          schema:
            type: string
        "500":
          description: error adding or removing reaction
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Add or remove a reaction
      tags:
      - Blog
  /blog/update:
    put:
      consumes:
      - application/json
      description: Update a blog post
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Blog ID
        in: query
        name: blog_id
        required: true
        type: string
      - description: update blog post request
        in: body
        name: blogPost
        required: true
        schema:
          $ref: '#/definitions/types.UpdateBlogPostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: blog updated successfully
          schema:
            $ref: '#/definitions/types.BlogResp'
        "400":
          description: invalid data request
          schema:
            type: string
        "500":
          description: error updating blog
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update a blog post
      tags:
      - Blog
  /user/create:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: user created successfully
          schema:
            $ref: '#/definitions/types.UserResp'
        "400":
          description: invalid data request
          schema:
            type: string
        "500":
          description: error creating user
          schema:
            type: string
      summary: Create a new user
      tags:
      - User
  /user/delete:
    delete:
      consumes:
      - application/json
      description: Delete a user
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: user deleted successfully
          schema:
            type: string
        "400":
          description: invalid data request
          schema:
            type: string
        "500":
          description: error deleting user
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - User
  /user/get:
    get:
      consumes:
      - application/json
      description: Get a user by ID
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: user found successfully
          schema:
            $ref: '#/definitions/types.UserResp'
        "400":
          description: invalid data request
          schema:
            type: string
        "500":
          description: error getting user
          schema:
            type: string
      summary: Get a user by ID
      tags:
      - User
  /user/getAll:
    get:
      consumes:
      - application/json
      description: Get all users
      parameters:
      - description: Offset
        in: query
        name: offset
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: users found successfully
          schema:
            items:
              $ref: '#/definitions/types.UserResp'
            type: array
        "400":
          description: invalid data request
          schema:
            type: string
        "500":
          description: error getting user
          schema:
            type: string
      summary: Get all users
      tags:
      - User
  /user/login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns a JWT token
      parameters:
      - description: Login Request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/types.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: JWT Token
          schema:
            type: string
        "400":
          description: invalid data request
          schema:
            type: string
        "401":
          description: invalid email or password
          schema:
            type: string
      summary: User login
      tags:
      - User
  /user/update:
    put:
      consumes:
      - application/json
      description: Update a user
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: User Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: user updated successfully
          schema:
            $ref: '#/definitions/types.UserResp'
        "400":
          description: invalid data request
          schema:
            type: string
        "500":
          description: error updating user
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - User
swagger: "2.0"
